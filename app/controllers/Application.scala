package controllers

import play.api._
import play.api.Play
import play.api.mvc._
import java.net._
import helpers._
import models._
import orle.in.util.UnsafeURLException
import play.api.libs.json.Json
import play.api.libs.json._
import play.api.cache.Cached
import play.api.Play.current
import play.api.libs.concurrent.Execution.Implicits._
import com.mongodb.casbah.WriteConcern
import se.radley.plugin.salat._
import se.radley.plugin.salat.Binders._
import mongoContext._
import play.i18n.Messages
import play.api.libs.iteratee.Enumerator
import java.text.SimpleDateFormat
import orle.in.util.DuplicateCustomCodeException
import orle.in.util.DomainNameResolutionException

object Application extends Controller {

  def index = Cached("index", 5) {
    Action.async {

      val futureResult = scala.concurrent.Future {
        val hosturl = Play.current.configuration.getString("shorturl.root").get.toString()
        Ok(views.html.index(hosturl.toString()))
      }
      futureResult
    }
  }

  def shorten = Action.async {
    implicit request =>
      val json = request.body.asJson.get
      val longURL = (json \ "urlToShorten").as[String]
      val customCode = (json \ "customCode").as[String]

      val futureResult = scala.concurrent.Future {
        try {
          val url = new URL(longURL)
          val uri = url.toURI()

          //check if the url is safe.
          UrlSafetyChecker.safetyLookup(longURL)

          //make sure that the custom code has no illegal characters
          val regexCode = """[A-Za-z0-9\_]*""".r
          val jsontosend = customCode match {
            case regexCode() => {
              val mapOfObjectToSend = Shortener.shorten(longURL, customCode)
              val jsontosendObj = Json.toJson(mapOfObjectToSend)
              jsontosendObj
            }
            case _ => {
              throw new IllegalArgumentException
            }

          }
          Ok(jsontosend)
          //Status(400)("We weren't able to save that URL. Try again.")

        } catch {
          case ex: DuplicateCustomCodeException => Status(400)(ex.getMessage())
          case ex: DomainNameResolutionException => Status(400)(ex.getMessage())
          case ex: IllegalArgumentException => Status(400)(Messages.get("application.invalidURLOrCodeMessage"))
          case ex: UnsafeURLException => {
            val message = ex.getMessage()
            message match {
              case UrlSafetyChecker.MALWARE => {
                val message = Messages.get("application.malwaremessage") + " " + Messages.get("application.googleadvisorymessagetitle") + " " + Messages.get("application.googleadvisorymessage")
                Status(400)(message)
              }
              case UrlSafetyChecker.PHISHING => {
                val message = Messages.get("application.phishingurlmessage") + " " + Messages.get("application.googleadvisorymessagetitle") + " " + Messages.get("application.googleadvisorymessage")
                Status(400)(message)
              }
            }
          } 
          case ex: Exception => Status(400)(Messages.get("application.generalExceptionOnSaveMessage"))
        }
      }
      futureResult
  }

  def getLongURL(id: String) = Action.async {
    val futureResponse = scala.concurrent.Future {
      try {
        var urlrecord = UrlInfo.findByID(id)
        if (urlrecord.isEmpty) {
          //We append a "_" to custom code supplied by user, to avoid conflict with the id generated by Base62Counter. Hence a GET should also search for the custom code with a "_" appended.
          urlrecord = UrlInfo.findByCustomCode(id)

        }
        if (urlrecord.isEmpty) {
          //Status (404)("That orle.in link doesn't exist.")
          BadRequest(views.html.error(Messages.get("application.nonExistantOrleUrlMessage")))
        } else {
          val urlinfo = urlrecord.get

          //We append a "_" to custom code supplied by user, to avoid conflict with the id generated by Base62Counter.
          val updateUrlInfo = new UrlInfo(urlinfo.id, urlinfo.url, urlinfo.hash, urlinfo.clicks + 1, urlinfo.customcode)

          UrlInfo.save(updateUrlInfo, WriteConcern.Safe)

          val url = urlinfo.url
          Redirect(url)
        }
      } catch {
        case ex: Exception => Status(400)(Messages.get("application.errorOnGetOrleUrlMessage"))
      }
    }
    futureResponse
  }

  def getQRCodeImage(filename: String) = Action.async {
    val futureResponse = scala.concurrent.Future {
      try {
        import com.mongodb.casbah.Implicits._
        val gridFs = gridFS("fs")

        gridFs.findOne(Map("filename" -> filename)) match {
          case Some(f) => SimpleResult(
            ResponseHeader(OK, Map(
              CONTENT_LENGTH -> f.length.toString,
              CONTENT_TYPE -> "image/png",
              DATE -> new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss 'GMT'", java.util.Locale.US).format(f.uploadDate))),
            Enumerator.fromStream(f.inputStream))
          case None => NotFound

        }
      }
    }
    futureResponse
  }
  
  
  def getFeaturesPage() = Cached("features", 5) {
    Action.async {
	    val futureResponse = scala.concurrent.Future {
	      Ok(views.html.features())
	    }
    
	    futureResponse
    }
  }
    
    def getSignupPage() = Cached("signup", 5) {
      Action.async {
        val futureResponse = scala.concurrent.Future {
          Ok(views.html.signup())
        }
        
        futureResponse
        
      }
    }
    
    def getSigninPage() = Cached("signin", 5) {
      Action.async {
        val futureResponse = scala.concurrent.Future {
          Ok(views.html.signin())
        }
        futureResponse
      }
    }

}