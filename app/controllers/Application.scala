package controllers

import play.api._
import play.api.Play
import play.api.mvc._
import java.net._
import helpers._
import models._

import play.api.libs.json.Json
import play.api.libs.json._

import com.mongodb.casbah.WriteConcern
import se.radley.plugin.salat._
import se.radley.plugin.salat.Binders._
import mongoContext._

object Application extends Controller {

  def index = Action {
    val hosturl = Play.current.configuration.getString("shorturl.root").get.toString()
    Ok(views.html.index(hosturl.toString()))
  }

  def shorten = Action {
    implicit request =>
      val json = request.body.asJson.get
      val longURL = (json \ "urlToShorten").as[String]
      val customCode = (json \ "customCode").as[String]
      try {
        val url = new URL(longURL)
        val uri = url.toURI()

        //make sure that the custom code has no illegal characters
        val regexCode = """[A-Za-z0-9\_]{0,20}""".r
        val matcher = customCode match {case regexCode() => true case _ => false}
        
        if(matcher == true){
          //get the MD5 hash
          val hash = Base62Counter.md5SumString(url.toURI())

          //find record by URL
          val urlrecord = UrlInfo.findByHash(hash)

          //find record by customCode. We append a "_" to custom code supplied by user, to avoid conflict with the id generated by Base62Counter.
          val urlByCustomCode = if (customCode != "") UrlInfo.findByCustomCode(customCode) else None

          val hosturl = Play.current.configuration.getString("shorturl.host").get.toString()

          var completeURL = ""
          var id = ""
          var clicks = 0

          if (urlrecord.isEmpty && urlByCustomCode.isEmpty) {
            if (Base62Counter.currentCount.toString == "") {
              val lastID = UrlInfo.findLastByInsert
              if (!lastID.isEmpty) {
                val lastIDString = lastID(lastID.size - 1).id
                Base62Counter.setInitialValues(lastIDString)
              }
            }

            id = Base62Counter.++

            //We append a "_" to custom code supplied by user, to avoid conflict with the id generated by Base62Counter.
            val urlInfo = new UrlInfo(id, url.toString(), hash, 0, customCode)
            UrlInfo.save(urlInfo, WriteConcern.Safe)

            if (customCode == "")
              completeURL = hosturl + id
            else
              completeURL = hosturl + customCode

            val jsontosend = Json.toJson(
              Map(
                "url" -> Json.toJson(completeURL.toString()),
                "clicks" -> Json.toJson(clicks.toString()),
                "pointsto" -> Json.toJson(longURL.toString()),
                "error" -> Json.toJson("".toString())
                ))

            Ok(jsontosend)

          } else if (urlrecord.isEmpty && !urlByCustomCode.isEmpty) {
            Status(412)("That custom tag is already in use. Try another one.")
          } else {
            
            var error = ""
            completeURL = hosturl + (
                if (urlrecord.get.customcode != ""){
                  if(customCode != "") error = "This URL already has a custom tag. You cannot change it."
                  urlrecord.get.customcode.toString 
                }
               else if(customCode != "") 
               {
            	   val urlInfo = new UrlInfo(urlrecord.get.id.toString, urlrecord.get.url.toString(), urlrecord.get.hash, urlrecord.get.clicks, customCode)
            	   UrlInfo.save(urlInfo, WriteConcern.Safe)
            	   customCode
          		}
               else
                 urlrecord.get.id.toString
                )
            
                clicks = urlrecord.get.clicks
            val jsontosend = Json.toJson(
              Map(
                "url" -> Json.toJson(completeURL.toString()),
                "clicks" -> Json.toJson(clicks.toString()),
                "pointsto" -> Json.toJson(longURL.toString()),
                "error" -> Json.toJson(error.toString())
                )
            )

            Ok(jsontosend)
          }
        }
        else {
           Status (400)("We weren't able to save that URL. Try again.")
        }

      } catch {
        case ex: Exception => Status (400)("We weren't able to save that URL. Try again.")

      }
  }

  def getLongURL(id: String) = Action {

    try {
      var urlrecord = UrlInfo.findByID(id)
      if (urlrecord.isEmpty) {
        //We append a "_" to custom code supplied by user, to avoid conflict with the id generated by Base62Counter. Hence a GET should also search for the custom code with a "_" appended.
        urlrecord = UrlInfo.findByCustomCode(id)

      }
      if (urlrecord.isEmpty) {
        //Status (404)("That orle.in link doesn't exist.")
        BadRequest(views.html.error("That orle.in link doesn't exist."))
      } else {
        val urlinfo = urlrecord.get
        
        //We append a "_" to custom code supplied by user, to avoid conflict with the id generated by Base62Counter.
        val updateUrlInfo = new UrlInfo(urlinfo.id, urlinfo.url, urlinfo.hash, urlinfo.clicks + 1, urlinfo.customcode)

        UrlInfo.save(updateUrlInfo, WriteConcern.Safe)

        val url = urlinfo.url
        Redirect(url)
      }
    } catch {
      case ex: Exception => BadRequest(ex.getLocalizedMessage())
    }
  }

}